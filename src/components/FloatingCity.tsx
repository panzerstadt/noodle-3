/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Cube1_2: THREE.Mesh;
    Cube1_2_1: THREE.Mesh;
    Cube1_2_2: THREE.Mesh;
    Cube1_2_3: THREE.Mesh;
    Cube1_2_4: THREE.Mesh;
    Cube1_2_5: THREE.Mesh;
  };
  materials: {
    ["gleaming white"]: THREE.MeshStandardMaterial;
    glass: THREE.MeshStandardMaterial;
    ["Mat.1_1"]: THREE.MeshStandardMaterial;
    blackish: THREE.MeshStandardMaterial;
    ["lights-soft-blue"]: THREE.MeshStandardMaterial;
    ["lights-strong-yellow"]: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF("/floating-city.gltf") as GLTFResult;

  useFrame((state) => {
    const t = state.clock.getElapsedTime();

    // city.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20;
    // city.current.rotation.x = Math.cos(t / 4) / 8;
    // city.current.rotation.y = Math.sin(t / 4) / 8;
    if (group.current) {
      group.current.position.y = (1 + Math.sin(t / 1.5)) / 8;
    }
    // city.current.position.y = (1 + Math.sin(t / 1.5)) / 10;
  });
  return (
    <group ref={group} {...props} dispose={null}>
      <group
        position={[-6.9018903, 9.396327, -7.0611539]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.1, 0.1, 0.1]}
      >
        <mesh castShadow receiveShadow geometry={nodes.Cube1_2.geometry}>
          <meshPhysicalMaterial
            roughness={0.1}
            metalness={0.1}
            color="#EEF0F2"
          />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube1_2_1.geometry}
          material={materials.glass}
        />
        <mesh castShadow receiveShadow geometry={nodes.Cube1_2_2.geometry}>
          <meshPhysicalMaterial roughness={0} metalness={0.3} color="#EEF0F2" />
        </mesh>
        <mesh castShadow receiveShadow geometry={nodes.Cube1_2_3.geometry}>
          <meshPhysicalMaterial
            roughness={0.1}
            metalness={0.3}
            color="#EEF0F2"
          />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube1_2_4.geometry}
          material={materials["lights-soft-blue"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube1_2_5.geometry}
          material={materials["lights-strong-yellow"]}
        >
          <meshLambertMaterial emissiveIntensity={10000} color="#E9DF00" />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("/floating-city.gltf");
